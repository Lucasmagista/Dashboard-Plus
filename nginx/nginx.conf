user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 64M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=20r/m;

    # Upstream pools for load balancing
    upstream dashboard_app {
        least_conn;
        server dashboard:3000 max_fails=3 fail_timeout=30s;
        # Add more instances for auto-scaling
        # server dashboard-2:3000 max_fails=3 fail_timeout=30s backup;
        # server dashboard-3:3000 max_fails=3 fail_timeout=30s backup;
    }

    upstream analytics_service {
        least_conn;
        server analytics-service:3000 max_fails=3 fail_timeout=30s;
    }

    upstream notifications_service {
        least_conn;
        server notifications-service:3000 max_fails=3 fail_timeout=30s;
    }

    upstream auth_service {
        least_conn;
        server auth-service:3000 max_fails=3 fail_timeout=30s;
    }

    upstream ai_service {
        least_conn;
        server ai-service:3000 max_fails=3 fail_timeout=30s;
    }

    upstream integration_service {
        least_conn;
        server integration-service:3000 max_fails=3 fail_timeout=30s;
    }

    # Health check endpoint
    server {
        listen 80;
        server_name health.dashboard.local;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name dashboard.local www.dashboard.local;
        return 301 https://$server_name$request_uri;
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name dashboard.local www.dashboard.local;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/dashboard.crt;
        ssl_certificate_key /etc/nginx/ssl/dashboard.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # Modern configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss:;";

        # Main application
        location / {
            proxy_pass http://dashboard_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # Analytics API
        location /api/analytics/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://analytics_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Cache analytics responses
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
        }

        # Notifications API
        location /api/notifications/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://notifications_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Authentication API
        location /api/auth/ {
            limit_req zone=auth burst=5 nodelay;
            
            proxy_pass http://auth_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Don't cache auth responses
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }

        # AI/ML API
        location /api/ai/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://ai_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Longer timeout for AI processing
            proxy_connect_timeout 120s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }

        # Integrations API
        location /api/integrations/ {
            limit_req zone=api burst=15 nodelay;
            
            proxy_pass http://integration_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Cache integration data
            proxy_cache_valid 200 10m;
            proxy_cache_valid 404 1m;
        }

        # Static files caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status "STATIC";
            
            # Try to serve from main app
            proxy_pass http://dashboard_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health checks
        location /health {
            access_log off;
            return 200 "healthy";
            add_header Content-Type text/plain;
        }

        location /nginx-health {
            access_log off;
            return 200 "nginx healthy";
            add_header Content-Type text/plain;
        }

        # Monitoring endpoints
        location /metrics {
            proxy_pass http://dashboard_app/metrics;
            allow 172.20.0.0/16;  # Only allow from docker network
            deny all;
        }

        # Admin panel (restrict access)
        location /admin {
            # IP whitelist for admin access
            allow 192.168.1.0/24;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            deny all;
            
            proxy_pass http://dashboard_app/admin;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Grafana monitoring
    server {
        listen 443 ssl http2;
        server_name monitoring.dashboard.local;

        ssl_certificate /etc/nginx/ssl/dashboard.crt;
        ssl_certificate_key /etc/nginx/ssl/dashboard.key;

        location / {
            proxy_pass http://grafana:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Auto-scaling webhook endpoint
    server {
        listen 8080;
        server_name autoscaler.dashboard.local;
        
        location /webhook/scale {
            proxy_pass http://autoscaler:3000/webhook/scale;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Only allow from monitoring systems
            allow 172.20.0.0/16;
            deny all;
        }
    }
}
